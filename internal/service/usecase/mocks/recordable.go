// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/littlebugger/pow-wow/internal/service/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockRecordable is an autogenerated mock type for the Recordable type
type MockRecordable struct {
	mock.Mock
}

type MockRecordable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecordable) EXPECT() *MockRecordable_Expecter {
	return &MockRecordable_Expecter{mock: &_m.Mock}
}

// Score provides a mock function with given fields: ctx, key, challenge
func (_m *MockRecordable) Score(ctx context.Context, key uuid.UUID, challenge entity.Challenge) error {
	ret := _m.Called(ctx, key, challenge)

	if len(ret) == 0 {
		panic("no return value specified for Score")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entity.Challenge) error); ok {
		r0 = rf(ctx, key, challenge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRecordable_Score_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Score'
type MockRecordable_Score_Call struct {
	*mock.Call
}

// Score is a helper method to define mock.On call
//   - ctx context.Context
//   - key uuid.UUID
//   - challenge entity.Challenge
func (_e *MockRecordable_Expecter) Score(ctx interface{}, key interface{}, challenge interface{}) *MockRecordable_Score_Call {
	return &MockRecordable_Score_Call{Call: _e.mock.On("Score", ctx, key, challenge)}
}

func (_c *MockRecordable_Score_Call) Run(run func(ctx context.Context, key uuid.UUID, challenge entity.Challenge)) *MockRecordable_Score_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entity.Challenge))
	})
	return _c
}

func (_c *MockRecordable_Score_Call) Return(_a0 error) *MockRecordable_Score_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecordable_Score_Call) RunAndReturn(run func(context.Context, uuid.UUID, entity.Challenge) error) *MockRecordable_Score_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRecordable creates a new instance of MockRecordable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecordable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecordable {
	mock := &MockRecordable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
