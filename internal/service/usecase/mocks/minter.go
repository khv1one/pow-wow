// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entity "github.com/littlebugger/pow-wow/internal/service/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockMinter is an autogenerated mock type for the Minter type
type MockMinter struct {
	mock.Mock
}

type MockMinter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMinter) EXPECT() *MockMinter_Expecter {
	return &MockMinter_Expecter{mock: &_m.Mock}
}

// GenerateChallenge provides a mock function with given fields:
func (_m *MockMinter) GenerateChallenge() (entity.Challenge, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateChallenge")
	}

	var r0 entity.Challenge
	var r1 error
	if rf, ok := ret.Get(0).(func() (entity.Challenge, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() entity.Challenge); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entity.Challenge)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMinter_GenerateChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateChallenge'
type MockMinter_GenerateChallenge_Call struct {
	*mock.Call
}

// GenerateChallenge is a helper method to define mock.On call
func (_e *MockMinter_Expecter) GenerateChallenge() *MockMinter_GenerateChallenge_Call {
	return &MockMinter_GenerateChallenge_Call{Call: _e.mock.On("GenerateChallenge")}
}

func (_c *MockMinter_GenerateChallenge_Call) Run(run func()) *MockMinter_GenerateChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMinter_GenerateChallenge_Call) Return(_a0 entity.Challenge, _a1 error) *MockMinter_GenerateChallenge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMinter_GenerateChallenge_Call) RunAndReturn(run func() (entity.Challenge, error)) *MockMinter_GenerateChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMinter creates a new instance of MockMinter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMinter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMinter {
	mock := &MockMinter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
