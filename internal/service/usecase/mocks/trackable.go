// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTrackable is an autogenerated mock type for the Trackable type
type MockTrackable struct {
	mock.Mock
}

type MockTrackable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTrackable) EXPECT() *MockTrackable_Expecter {
	return &MockTrackable_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, key
func (_m *MockTrackable) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTrackable_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTrackable_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockTrackable_Expecter) Delete(ctx interface{}, key interface{}) *MockTrackable_Delete_Call {
	return &MockTrackable_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *MockTrackable_Delete_Call) Run(run func(ctx context.Context, key string)) *MockTrackable_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTrackable_Delete_Call) Return(_a0 error) *MockTrackable_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTrackable_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockTrackable_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockTrackable) Get(ctx context.Context, key string) (*string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTrackable_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTrackable_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockTrackable_Expecter) Get(ctx interface{}, key interface{}) *MockTrackable_Get_Call {
	return &MockTrackable_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockTrackable_Get_Call) Run(run func(ctx context.Context, key string)) *MockTrackable_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTrackable_Get_Call) Return(_a0 *string, _a1 error) *MockTrackable_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTrackable_Get_Call) RunAndReturn(run func(context.Context, string) (*string, error)) *MockTrackable_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, key, value
func (_m *MockTrackable) Save(ctx context.Context, key string, value string) error {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTrackable_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockTrackable_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
func (_e *MockTrackable_Expecter) Save(ctx interface{}, key interface{}, value interface{}) *MockTrackable_Save_Call {
	return &MockTrackable_Save_Call{Call: _e.mock.On("Save", ctx, key, value)}
}

func (_c *MockTrackable_Save_Call) Run(run func(ctx context.Context, key string, value string)) *MockTrackable_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTrackable_Save_Call) Return(_a0 error) *MockTrackable_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTrackable_Save_Call) RunAndReturn(run func(context.Context, string, string) error) *MockTrackable_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTrackable creates a new instance of MockTrackable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTrackable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTrackable {
	mock := &MockTrackable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
