// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entity "github.com/littlebugger/pow-wow/internal/service/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockVerifier is an autogenerated mock type for the Verifier type
type MockVerifier struct {
	mock.Mock
}

type MockVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerifier) EXPECT() *MockVerifier_Expecter {
	return &MockVerifier_Expecter{mock: &_m.Mock}
}

// VerifySolution provides a mock function with given fields: challenge, solution
func (_m *MockVerifier) VerifySolution(challenge entity.Challenge, solution string) (bool, error) {
	ret := _m.Called(challenge, solution)

	if len(ret) == 0 {
		panic("no return value specified for VerifySolution")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Challenge, string) (bool, error)); ok {
		return rf(challenge, solution)
	}
	if rf, ok := ret.Get(0).(func(entity.Challenge, string) bool); ok {
		r0 = rf(challenge, solution)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(entity.Challenge, string) error); ok {
		r1 = rf(challenge, solution)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVerifier_VerifySolution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifySolution'
type MockVerifier_VerifySolution_Call struct {
	*mock.Call
}

// VerifySolution is a helper method to define mock.On call
//   - challenge entity.Challenge
//   - solution string
func (_e *MockVerifier_Expecter) VerifySolution(challenge interface{}, solution interface{}) *MockVerifier_VerifySolution_Call {
	return &MockVerifier_VerifySolution_Call{Call: _e.mock.On("VerifySolution", challenge, solution)}
}

func (_c *MockVerifier_VerifySolution_Call) Run(run func(challenge entity.Challenge, solution string)) *MockVerifier_VerifySolution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Challenge), args[1].(string))
	})
	return _c
}

func (_c *MockVerifier_VerifySolution_Call) Return(_a0 bool, _a1 error) *MockVerifier_VerifySolution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVerifier_VerifySolution_Call) RunAndReturn(run func(entity.Challenge, string) (bool, error)) *MockVerifier_VerifySolution_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerifier creates a new instance of MockVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerifier {
	mock := &MockVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
