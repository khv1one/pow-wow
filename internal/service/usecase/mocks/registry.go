// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/littlebugger/pow-wow/internal/service/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

type MockRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegistry) EXPECT() *MockRegistry_Expecter {
	return &MockRegistry_Expecter{mock: &_m.Mock}
}

// MarkSolved provides a mock function with given fields: ctx, key
func (_m *MockRegistry) MarkSolved(ctx context.Context, key uuid.UUID) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for MarkSolved")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegistry_MarkSolved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkSolved'
type MockRegistry_MarkSolved_Call struct {
	*mock.Call
}

// MarkSolved is a helper method to define mock.On call
//   - ctx context.Context
//   - key uuid.UUID
func (_e *MockRegistry_Expecter) MarkSolved(ctx interface{}, key interface{}) *MockRegistry_MarkSolved_Call {
	return &MockRegistry_MarkSolved_Call{Call: _e.mock.On("MarkSolved", ctx, key)}
}

func (_c *MockRegistry_MarkSolved_Call) Run(run func(ctx context.Context, key uuid.UUID)) *MockRegistry_MarkSolved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRegistry_MarkSolved_Call) Return(_a0 error) *MockRegistry_MarkSolved_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_MarkSolved_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockRegistry_MarkSolved_Call {
	_c.Call.Return(run)
	return _c
}

// Match provides a mock function with given fields: ctx, key
func (_m *MockRegistry) Match(ctx context.Context, key uuid.UUID) (entity.Challenge, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 entity.Challenge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (entity.Challenge, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entity.Challenge); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(entity.Challenge)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegistry_Match_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Match'
type MockRegistry_Match_Call struct {
	*mock.Call
}

// Match is a helper method to define mock.On call
//   - ctx context.Context
//   - key uuid.UUID
func (_e *MockRegistry_Expecter) Match(ctx interface{}, key interface{}) *MockRegistry_Match_Call {
	return &MockRegistry_Match_Call{Call: _e.mock.On("Match", ctx, key)}
}

func (_c *MockRegistry_Match_Call) Run(run func(ctx context.Context, key uuid.UUID)) *MockRegistry_Match_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRegistry_Match_Call) Return(_a0 entity.Challenge, _a1 error) *MockRegistry_Match_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRegistry_Match_Call) RunAndReturn(run func(context.Context, uuid.UUID) (entity.Challenge, error)) *MockRegistry_Match_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegistry creates a new instance of MockRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistry {
	mock := &MockRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
