// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockSupervisor is an autogenerated mock type for the Supervisor type
type MockSupervisor struct {
	mock.Mock
}

type MockSupervisor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSupervisor) EXPECT() *MockSupervisor_Expecter {
	return &MockSupervisor_Expecter{mock: &_m.Mock}
}

// Oversee provides a mock function with given fields: ctx, remark, solution
func (_m *MockSupervisor) Oversee(ctx context.Context, remark uuid.UUID, solution string) (string, error) {
	ret := _m.Called(ctx, remark, solution)

	if len(ret) == 0 {
		panic("no return value specified for Oversee")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (string, error)); ok {
		return rf(ctx, remark, solution)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) string); ok {
		r0 = rf(ctx, remark, solution)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, remark, solution)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSupervisor_Oversee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Oversee'
type MockSupervisor_Oversee_Call struct {
	*mock.Call
}

// Oversee is a helper method to define mock.On call
//   - ctx context.Context
//   - remark uuid.UUID
//   - solution string
func (_e *MockSupervisor_Expecter) Oversee(ctx interface{}, remark interface{}, solution interface{}) *MockSupervisor_Oversee_Call {
	return &MockSupervisor_Oversee_Call{Call: _e.mock.On("Oversee", ctx, remark, solution)}
}

func (_c *MockSupervisor_Oversee_Call) Run(run func(ctx context.Context, remark uuid.UUID, solution string)) *MockSupervisor_Oversee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockSupervisor_Oversee_Call) Return(_a0 string, _a1 error) *MockSupervisor_Oversee_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSupervisor_Oversee_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (string, error)) *MockSupervisor_Oversee_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSupervisor creates a new instance of MockSupervisor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSupervisor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSupervisor {
	mock := &MockSupervisor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
