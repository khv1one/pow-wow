// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/littlebugger/pow-wow/internal/service/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockChallenger is an autogenerated mock type for the Challenger type
type MockChallenger struct {
	mock.Mock
}

type MockChallenger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChallenger) EXPECT() *MockChallenger_Expecter {
	return &MockChallenger_Expecter{mock: &_m.Mock}
}

// MakeChallenge provides a mock function with given fields: ctx
func (_m *MockChallenger) MakeChallenge(ctx context.Context) (uuid.UUID, entity.Challenge, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MakeChallenge")
	}

	var r0 uuid.UUID
	var r1 entity.Challenge
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (uuid.UUID, entity.Challenge, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uuid.UUID); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) entity.Challenge); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(entity.Challenge)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockChallenger_MakeChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeChallenge'
type MockChallenger_MakeChallenge_Call struct {
	*mock.Call
}

// MakeChallenge is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockChallenger_Expecter) MakeChallenge(ctx interface{}) *MockChallenger_MakeChallenge_Call {
	return &MockChallenger_MakeChallenge_Call{Call: _e.mock.On("MakeChallenge", ctx)}
}

func (_c *MockChallenger_MakeChallenge_Call) Run(run func(ctx context.Context)) *MockChallenger_MakeChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockChallenger_MakeChallenge_Call) Return(_a0 uuid.UUID, _a1 entity.Challenge, _a2 error) *MockChallenger_MakeChallenge_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockChallenger_MakeChallenge_Call) RunAndReturn(run func(context.Context) (uuid.UUID, entity.Challenge, error)) *MockChallenger_MakeChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChallenger creates a new instance of MockChallenger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChallenger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChallenger {
	mock := &MockChallenger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
